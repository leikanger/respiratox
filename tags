!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ArduinoMOCK	serialInterfaceTEST.h	/^        ArduinoMOCK(std::string argConstMessage ="", unsigned int argDelayBetweenMessagesMs =200) $/;"	f	struct:TEST::ArduinoMOCK
ArduinoMOCK	serialInterfaceTEST.h	/^    struct ArduinoMOCK {$/;"	s	namespace:TEST
ArduinoMOCK_for_message_designing	serialInterfaceTEST.cpp	/^BOOST_AUTO_TEST_SUITE( ArduinoMOCK_for_message_designing );$/;"	v
BBlack	terminalOutputColors.h	/^const string Black 	="\\e[0;30m"; const string BBlack="\\e[1;30m"; 	const string UBlack="\\e[4;30m";   $/;"	m	namespace:textColor
BBlue	terminalOutputColors.h	/^const string Blue 	="\\e[0;34m"; const string BBlue ="\\e[1;34m";	const string UBlue="\\e[4;34m";$/;"	m	namespace:textColor
BCyan	terminalOutputColors.h	/^const string Cyan 	="\\e[0;36m"; const string BCyan ="\\e[1;36m"; 	const string UCyan="\\e[4;36m";$/;"	m	namespace:textColor
BGreen	terminalOutputColors.h	/^const string Green 	="\\e[0;32m"; const string BGreen="\\e[1;32m"; 	const string UGreen="\\e[4;32m";   $/;"	m	namespace:textColor
BIBla	terminalOutputColors.h	/^const string IBla="\\e[0;90m";    const string BIBla="\\e[1;90m";   	const string On_Bla="\\e[40m";    const string On_IBla="\\e[0;100m";$/;"	m	namespace:textColor
BIBlu	terminalOutputColors.h	/^const string IBlu="\\e[0;94m";    const string BIBlu="\\e[1;94m";   	const string On_Blu="\\e[44m";    const string On_IBlu="\\e[0;104m";$/;"	m	namespace:textColor
BICya	terminalOutputColors.h	/^const string ICya="\\e[0;96m";    const string BICya="\\e[1;96m";   	const string On_Cya="\\e[46m";    const string On_ICya="\\e[0;106m";$/;"	m	namespace:textColor
BIGre	terminalOutputColors.h	/^const string IGre="\\e[0;92m";    const string BIGre="\\e[1;92m";   	const string On_Gre="\\e[42m";    const string On_IGre="\\e[0;102m";$/;"	m	namespace:textColor
BIPur	terminalOutputColors.h	/^const string IPur="\\e[0;95m";    const string BIPur="\\e[1;95m";   	const string On_Pur="\\e[45m";    const string On_IPur="\\e[0;105m";$/;"	m	namespace:textColor
BIRed	terminalOutputColors.h	/^const string IRed="\\e[0;91m";    const string BIRed="\\e[1;91m";   	const string On_Red="\\e[41m";    const string On_IRed="\\e[0;101m";$/;"	m	namespace:textColor
BIWhi	terminalOutputColors.h	/^const string IWhi="\\e[0;97m";    const string BIWhi="\\e[1;97m";   	const string On_Whi="\\e[47m";    const string On_IWhi="\\e[0;107m";$/;"	m	namespace:textColor
BIYel	terminalOutputColors.h	/^const string IYel="\\e[0;93m";    const string BIYel="\\e[1;93m";   	const string On_Yel="\\e[43m";    const string On_IYel="\\e[0;103m";$/;"	m	namespace:textColor
BOOST_AUTO_TEST_CASE	serialInterfaceTEST.cpp	/^BOOST_AUTO_TEST_CASE( badly_formed_data_does_not_give_error__3values )$/;"	f
BOOST_AUTO_TEST_CASE	serialInterfaceTEST.cpp	/^BOOST_AUTO_TEST_CASE( construct_Serial_object )$/;"	f
BOOST_AUTO_TEST_CASE	serialInterfaceTEST.cpp	/^BOOST_AUTO_TEST_CASE( empty_buffer_when_construct_Serial_object )$/;"	f
BOOST_AUTO_TEST_CASE	serialInterfaceTEST.cpp	/^BOOST_AUTO_TEST_CASE( large_data_also_gives_right_answer )$/;"	f
BOOST_AUTO_TEST_CASE	serialInterfaceTEST.cpp	/^BOOST_AUTO_TEST_CASE( receive_messages_from_ArduinoMOCK )$/;"	f
BOOST_AUTO_TEST_CASE	serialInterfaceTEST.cpp	/^BOOST_AUTO_TEST_CASE( resulting_vector_from_message_splitting_seems_correct )$/;"	f
BOOST_AUTO_TEST_CASE	serialInterfaceTEST.cpp	/^BOOST_AUTO_TEST_CASE( send_message_through_virtual_serial_port )$/;"	f
BOOST_AUTO_TEST_CASE	serialInterfaceTEST.cpp	/^BOOST_AUTO_TEST_CASE( separate_message_into_3_values )$/;"	f
BOOST_AUTO_TEST_CASE	serialInterfaceTEST.cpp	/^BOOST_AUTO_TEST_CASE( serial_port_paths_exist )$/;"	f
BOOST_AUTO_TEST_CASE	serialInterfaceTEST.cpp	/^BOOST_AUTO_TEST_CASE( serial_read )$/;"	f
BOOST_AUTO_TEST_CASE	serialInterfaceTEST.cpp	/^BOOST_AUTO_TEST_CASE( serial_write )$/;"	f
BOOST_AUTO_TEST_CASE	serialInterfaceTEST.cpp	/^BOOST_AUTO_TEST_CASE( stress_test_receive_message_from_ArduinoMOCK )$/;"	f
BOOST_AUTO_TEST_CASE	serialInterfaceTEST.cpp	/^BOOST_AUTO_TEST_CASE( thread_test )$/;"	f
BOOST_AUTO_TEST_CASE	serialInterfaceTEST.cpp	/^BOOST_AUTO_TEST_CASE( what_happens_when_only_two_values_are_present )$/;"	f
BOOST_LIBR	Makefile	/^BOOST_LIBR=-lboost_system -lboost_thread$/;"	m
BOOST_TEST_DYN_LINK	serialInterfaceTEST.h	5;"	d
BOOST_TEST_MODULE	serialInterfaceTEST.h	4;"	d
BPurple	terminalOutputColors.h	/^const string Purple ="\\e[0;35m"; const string BPurple="\\e[1;35m"; 	const string UPurple="\\e[4;35m";$/;"	m	namespace:textColor
BRed	terminalOutputColors.h	/^const string Red 	="\\e[0;31m"; const string BRed 	="\\e[1;31m"; 	const string URed="\\e[4;31m";$/;"	m	namespace:textColor
BWhite	terminalOutputColors.h	/^const string White 	="\\e[0;37m"; const string BWhite="\\e[1;37m"; 	const string UWhite="\\e[4;37m";$/;"	m	namespace:textColor
BYellow	terminalOutputColors.h	/^const string Yellow ="\\e[0;33m"; const string BYellow="\\e[1;33m"; 	const string UYellow="\\e[4;33m";$/;"	m	namespace:textColor
Black	terminalOutputColors.h	/^const string Black 	="\\e[0;30m"; const string BBlack="\\e[1;30m"; 	const string UBlack="\\e[4;30m";   $/;"	m	namespace:textColor
Blue	terminalOutputColors.h	/^const string Blue 	="\\e[0;34m"; const string BBlue ="\\e[1;34m";	const string UBlue="\\e[4;34m";$/;"	m	namespace:textColor
CC	Makefile	/^CC=clang++$/;"	m
CFLAGS	Makefile	/^CFLAGS=-std=c++11 -Wall -lpthread$/;"	m
Cyan	terminalOutputColors.h	/^const string Cyan 	="\\e[0;36m"; const string BCyan ="\\e[1;36m"; 	const string UCyan="\\e[4;36m";$/;"	m	namespace:textColor
Green	terminalOutputColors.h	/^const string Green 	="\\e[0;32m"; const string BGreen="\\e[1;32m"; 	const string UGreen="\\e[4;32m";   $/;"	m	namespace:textColor
IBla	terminalOutputColors.h	/^const string IBla="\\e[0;90m";    const string BIBla="\\e[1;90m";   	const string On_Bla="\\e[40m";    const string On_IBla="\\e[0;100m";$/;"	m	namespace:textColor
IBlu	terminalOutputColors.h	/^const string IBlu="\\e[0;94m";    const string BIBlu="\\e[1;94m";   	const string On_Blu="\\e[44m";    const string On_IBlu="\\e[0;104m";$/;"	m	namespace:textColor
ICya	terminalOutputColors.h	/^const string ICya="\\e[0;96m";    const string BICya="\\e[1;96m";   	const string On_Cya="\\e[46m";    const string On_ICya="\\e[0;106m";$/;"	m	namespace:textColor
IGre	terminalOutputColors.h	/^const string IGre="\\e[0;92m";    const string BIGre="\\e[1;92m";   	const string On_Gre="\\e[42m";    const string On_IGre="\\e[0;102m";$/;"	m	namespace:textColor
IPur	terminalOutputColors.h	/^const string IPur="\\e[0;95m";    const string BIPur="\\e[1;95m";   	const string On_Pur="\\e[45m";    const string On_IPur="\\e[0;105m";$/;"	m	namespace:textColor
IRed	terminalOutputColors.h	/^const string IRed="\\e[0;91m";    const string BIRed="\\e[1;91m";   	const string On_Red="\\e[41m";    const string On_IRed="\\e[0;101m";$/;"	m	namespace:textColor
IWhi	terminalOutputColors.h	/^const string IWhi="\\e[0;97m";    const string BIWhi="\\e[1;97m";   	const string On_Whi="\\e[47m";    const string On_IWhi="\\e[0;107m";$/;"	m	namespace:textColor
IYel	terminalOutputColors.h	/^const string IYel="\\e[0;93m";    const string BIYel="\\e[1;93m";   	const string On_Yel="\\e[43m";    const string On_IYel="\\e[0;103m";$/;"	m	namespace:textColor
On_Bla	terminalOutputColors.h	/^const string IBla="\\e[0;90m";    const string BIBla="\\e[1;90m";   	const string On_Bla="\\e[40m";    const string On_IBla="\\e[0;100m";$/;"	m	namespace:textColor
On_Blu	terminalOutputColors.h	/^const string IBlu="\\e[0;94m";    const string BIBlu="\\e[1;94m";   	const string On_Blu="\\e[44m";    const string On_IBlu="\\e[0;104m";$/;"	m	namespace:textColor
On_Cya	terminalOutputColors.h	/^const string ICya="\\e[0;96m";    const string BICya="\\e[1;96m";   	const string On_Cya="\\e[46m";    const string On_ICya="\\e[0;106m";$/;"	m	namespace:textColor
On_Gre	terminalOutputColors.h	/^const string IGre="\\e[0;92m";    const string BIGre="\\e[1;92m";   	const string On_Gre="\\e[42m";    const string On_IGre="\\e[0;102m";$/;"	m	namespace:textColor
On_IBla	terminalOutputColors.h	/^const string IBla="\\e[0;90m";    const string BIBla="\\e[1;90m";   	const string On_Bla="\\e[40m";    const string On_IBla="\\e[0;100m";$/;"	m	namespace:textColor
On_IBlu	terminalOutputColors.h	/^const string IBlu="\\e[0;94m";    const string BIBlu="\\e[1;94m";   	const string On_Blu="\\e[44m";    const string On_IBlu="\\e[0;104m";$/;"	m	namespace:textColor
On_ICya	terminalOutputColors.h	/^const string ICya="\\e[0;96m";    const string BICya="\\e[1;96m";   	const string On_Cya="\\e[46m";    const string On_ICya="\\e[0;106m";$/;"	m	namespace:textColor
On_IGre	terminalOutputColors.h	/^const string IGre="\\e[0;92m";    const string BIGre="\\e[1;92m";   	const string On_Gre="\\e[42m";    const string On_IGre="\\e[0;102m";$/;"	m	namespace:textColor
On_IPur	terminalOutputColors.h	/^const string IPur="\\e[0;95m";    const string BIPur="\\e[1;95m";   	const string On_Pur="\\e[45m";    const string On_IPur="\\e[0;105m";$/;"	m	namespace:textColor
On_IRed	terminalOutputColors.h	/^const string IRed="\\e[0;91m";    const string BIRed="\\e[1;91m";   	const string On_Red="\\e[41m";    const string On_IRed="\\e[0;101m";$/;"	m	namespace:textColor
On_IWhi	terminalOutputColors.h	/^const string IWhi="\\e[0;97m";    const string BIWhi="\\e[1;97m";   	const string On_Whi="\\e[47m";    const string On_IWhi="\\e[0;107m";$/;"	m	namespace:textColor
On_IYel	terminalOutputColors.h	/^const string IYel="\\e[0;93m";    const string BIYel="\\e[1;93m";   	const string On_Yel="\\e[43m";    const string On_IYel="\\e[0;103m";$/;"	m	namespace:textColor
On_Pur	terminalOutputColors.h	/^const string IPur="\\e[0;95m";    const string BIPur="\\e[1;95m";   	const string On_Pur="\\e[45m";    const string On_IPur="\\e[0;105m";$/;"	m	namespace:textColor
On_Red	terminalOutputColors.h	/^const string IRed="\\e[0;91m";    const string BIRed="\\e[1;91m";   	const string On_Red="\\e[41m";    const string On_IRed="\\e[0;101m";$/;"	m	namespace:textColor
On_Whi	terminalOutputColors.h	/^const string IWhi="\\e[0;97m";    const string BIWhi="\\e[1;97m";   	const string On_Whi="\\e[47m";    const string On_IWhi="\\e[0;107m";$/;"	m	namespace:textColor
On_Yel	terminalOutputColors.h	/^const string IYel="\\e[0;93m";    const string BIYel="\\e[1;93m";   	const string On_Yel="\\e[43m";    const string On_IYel="\\e[0;103m";$/;"	m	namespace:textColor
PATH_VIRTUAL_SERIAL_PORT_INPUT	pathToVirtualSerialPorts.h	/^static const std::string PATH_VIRTUAL_SERIAL_PORT_INPUT = "\/dev\/pts\/2";$/;"	v
PATH_VIRTUAL_SERIAL_PORT_OUTPUT	pathToVirtualSerialPorts.h	/^static const std::string PATH_VIRTUAL_SERIAL_PORT_OUTPUT= "\/dev\/pts\/3";$/;"	v
Purple	terminalOutputColors.h	/^const string Purple ="\\e[0;35m"; const string BPurple="\\e[1;35m"; 	const string UPurple="\\e[4;35m";$/;"	m	namespace:textColor
RColor	terminalOutputColors.h	/^const string RColor = "\\e[0m";    \/\/ Text Reset$/;"	m	namespace:textColor
Red	terminalOutputColors.h	/^const string Red 	="\\e[0;31m"; const string BRed 	="\\e[1;31m"; 	const string URed="\\e[4;31m";$/;"	m	namespace:textColor
SERIALINTERFACETEST_H	serialInterfaceTEST.h	2;"	d
SERIALINTERFACE_H	serialInterface.h	8;"	d
Serial	serialInterface.cpp	/^Serial::Serial( const std::string& portPath,$/;"	f	class:Serial
Serial	serialInterface.h	/^class Serial {$/;"	c
SerialInterface	serialInterface.h	/^class SerialInterface {$/;"	c
TERMINALOUTPUTCOLORS_H	terminalOutputColors.h	4;"	d
TEST	serialInterfaceTEST.h	/^namespace TEST{$/;"	n
UBlack	terminalOutputColors.h	/^const string Black 	="\\e[0;30m"; const string BBlack="\\e[1;30m"; 	const string UBlack="\\e[4;30m";   $/;"	m	namespace:textColor
UBlue	terminalOutputColors.h	/^const string Blue 	="\\e[0;34m"; const string BBlue ="\\e[1;34m";	const string UBlue="\\e[4;34m";$/;"	m	namespace:textColor
UCyan	terminalOutputColors.h	/^const string Cyan 	="\\e[0;36m"; const string BCyan ="\\e[1;36m"; 	const string UCyan="\\e[4;36m";$/;"	m	namespace:textColor
UGreen	terminalOutputColors.h	/^const string Green 	="\\e[0;32m"; const string BGreen="\\e[1;32m"; 	const string UGreen="\\e[4;32m";   $/;"	m	namespace:textColor
UPurple	terminalOutputColors.h	/^const string Purple ="\\e[0;35m"; const string BPurple="\\e[1;35m"; 	const string UPurple="\\e[4;35m";$/;"	m	namespace:textColor
URed	terminalOutputColors.h	/^const string Red 	="\\e[0;31m"; const string BRed 	="\\e[1;31m"; 	const string URed="\\e[4;31m";$/;"	m	namespace:textColor
UWhite	terminalOutputColors.h	/^const string White 	="\\e[0;37m"; const string BWhite="\\e[1;37m"; 	const string UWhite="\\e[4;37m";$/;"	m	namespace:textColor
UYellow	terminalOutputColors.h	/^const string Yellow ="\\e[0;33m"; const string BYellow="\\e[1;33m"; 	const string UYellow="\\e[4;33m";$/;"	m	namespace:textColor
White	terminalOutputColors.h	/^const string White 	="\\e[0;37m"; const string BWhite="\\e[1;37m"; 	const string UWhite="\\e[4;37m";$/;"	m	namespace:textColor
Yellow	terminalOutputColors.h	/^const string Yellow ="\\e[0;33m"; const string BYellow="\\e[1;33m"; 	const string UYellow="\\e[4;33m";$/;"	m	namespace:textColor
bContinueExecution	serialInterfaceTEST.h	/^        bool bContinueExecution;$/;"	m	struct:TEST::ArduinoMOCK
constMessage	serialInterfaceTEST.h	/^        const std::string constMessage;$/;"	m	struct:TEST::ArduinoMOCK
delayBetweenMessagesMs	serialInterfaceTEST.h	/^          , delayBetweenMessagesMs(argDelayBetweenMessagesMs)$/;"	f	struct:TEST::ArduinoMOCK
delayBetweenMessagesMs	serialInterfaceTEST.h	/^        const unsigned int delayBetweenMessagesMs;$/;"	m	struct:TEST::ArduinoMOCK
emptySerialOutputBuffer	serialInterfaceTEST.h	/^    void emptySerialOutputBuffer()$/;"	f	namespace:TEST
exec	serialInterfaceTEST.h	/^    std::string exec(const char* cmd) {$/;"	f	namespace:TEST
fileExists	serialInterfaceTEST.h	/^    bool fileExists(const std::string& filePath)$/;"	f	namespace:TEST
flush_both	serialInterfaceTEST.h	/^        flush_both = TCIOFLUSH$/;"	e	enum:TEST::flush_type
flush_receive	serialInterfaceTEST.h	/^        flush_receive = TCIFLUSH,$/;"	e	enum:TEST::flush_type
flush_send	serialInterfaceTEST.h	/^        flush_send = TCIOFLUSH,$/;"	e	enum:TEST::flush_type
flush_serial_port	serialInterfaceTEST.h	/^    void flush_serial_port($/;"	f	namespace:TEST
flush_type	serialInterfaceTEST.h	/^    enum flush_type$/;"	g	namespace:TEST
getNextMessage	serialInterfaceTEST.h	/^        std::string getNextMessage()$/;"	f	struct:TEST::ArduinoMOCK
getNextValueVector	serialInterface.cpp	/^std::vector<double> Serial::getNextValueVector()$/;"	f	class:Serial
io	serialInterface.h	/^    boost::asio::io_service io;$/;"	m	class:Serial
mThread	serialInterfaceTEST.h	/^        std::thread mThread;$/;"	m	struct:TEST::ArduinoMOCK
main	asio/clientTCP.cpp	/^int main(int argc, char** argv)$/;"	f
main	asio/serverTCP.cpp	/^int main()$/;"	f
make_coord_array	asio/serverTCP.cpp	/^std::vector<uint16_t> make_coord_array(size_t vectorLength)$/;"	f
make_daytime_string	asio/serverTCP.cpp	/^std::string make_daytime_string()$/;"	f
read	serialInterface.cpp	/^int Serial::read(std::string* pTekstBuffer)$/;"	f	class:Serial
run	serialInterfaceTEST.h	/^        void run()$/;"	f	struct:TEST::ArduinoMOCK
serialPort	serialInterface.h	/^    boost::asio::serial_port serialPort;$/;"	m	class:Serial
serialPort	serialInterfaceTEST.h	/^        Serial serialPort; $/;"	m	struct:TEST::ArduinoMOCK
serialPortPath	serialInterface.h	/^    const std::string serialPortPath;$/;"	m	class:Serial
serial_communication_through_virtual_serial_port	serialInterfaceTEST.cpp	/^BOOST_AUTO_TEST_SUITE(serial_communication_through_virtual_serial_port);$/;"	v
stop	serialInterfaceTEST.h	/^        void stop()$/;"	f	struct:TEST::ArduinoMOCK
textColor	terminalOutputColors.h	/^namespace textColor {$/;"	n
writeStringToFilepath	serialInterfaceTEST.h	/^    void writeStringToFilepath(const std::string& argString, const std::string& argPath)$/;"	f	namespace:TEST
write_message	serialInterface.cpp	/^int Serial::write_message(std::string pTextBuffer)$/;"	f	class:Serial
write_some	serialInterface.cpp	/^int Serial::write_some(const char* buf, const int size)$/;"	f	class:Serial
~ArduinoMOCK	serialInterfaceTEST.h	/^        ~ArduinoMOCK() {        stop();         }$/;"	f	struct:TEST::ArduinoMOCK
~Serial	serialInterface.cpp	/^Serial::~Serial()$/;"	f	class:Serial
